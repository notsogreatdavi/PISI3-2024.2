import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.cluster import KMeans

# ===== Estilos Personalizados com CSS ===== #
st.markdown(
    """
    <style>
        .main { background-color: #F0EFF4; }
        h1, h2 { color: #191970; }
        div.stButton > button {
            background-color: #FCE762;
            color: #353531;
            font-size: 16px;
            border-radius: 8px;
            border: none;
        }
        footer { visibility: hidden; }
    </style>
    """,
    unsafe_allow_html=True,
)

# Configura√ß√µes iniciais
st.title("An√°lise de Clusteriza√ß√£o de Estudantes")
st.sidebar.header("Configura√ß√µes")

# Carregar dados
csv_path = "./data/unistudents.csv"

try:
    df_unistudents = pd.read_csv(csv_path, low_memory=False)
    pd.set_option("display.max_columns", None)

    # Convers√£o de tipo
    df_unistudents["Family_Income"] = pd.to_numeric(
        df_unistudents["Family_Income"], errors="coerce"
    )

    # Imputa√ß√£o de valores faltantes
    # Num√©ricas
    num_imputer = SimpleImputer(strategy="mean")
    num_col = df_unistudents.select_dtypes(
        include=["float64", "int32", "int64"]
    ).columns
    df_unistudents[num_col] = num_imputer.fit_transform(df_unistudents[num_col])
    df_unistudents[num_col] = df_unistudents[num_col].apply(np.round)

    # Categ√≥ricas
    cat_imputer = SimpleImputer(strategy="most_frequent")
    cat_col = df_unistudents.select_dtypes(include=["object"]).columns
    df_unistudents[cat_col] = cat_imputer.fit_transform(df_unistudents[cat_col])

    # Codifica√ß√£o de colunas categ√≥ricas
    colunas_categoricas = [
        "Gender",
        "Parental_Education",
        "Previous_Grades",
        "Class_Participation",
        "Major",
        "School_Type",
        "Financial_Status",
        "Parental_Involvement",
        "Educational_Resources",
        "Motivation",
        "Self_Esteem",
        "Stress_Levels",
        "School_Environment",
        "Professor_Quality",
        "Extracurricular_Activities",
        "Nutrition",
        "Physical_Activity",
        "Educational_Tech_Use",
        "Peer_Group",
        "Bullying",
        "Study_Space",
        "Learning_Style",
        "Tutoring",
        "Mentoring",
        "Lack_of_Interest",
        "Sports_Participation",
        "Grades",
    ]
    label_encoder = LabelEncoder()
    for column in colunas_categoricas:
        df_unistudents[column] = label_encoder.fit_transform(
            df_unistudents[column].astype(str)
        )

    # Sele√ß√£o de colunas para clusteriza√ß√£o
    cluster_features = [
        "Study_Hours",
        "Grades",
        "Class_Size",
        "Attendance",
        "Screen_Time",
        "Motivation",
        "Stress_Levels",
    ]
    df_cluster = df_unistudents[cluster_features].dropna()

    # Verificar se todas as colunas s√£o num√©ricas
    if not np.all(
        [np.issubdtype(df_cluster[col].dtype, np.number) for col in df_cluster.columns]
    ):
        raise ValueError(
            "Existem colunas n√£o num√©ricas nos dados ap√≥s o pr√©-processamento."
        )

    # Normaliza√ß√£o dos dados
    scaler = MinMaxScaler()
    df_cluster_scaled = scaler.fit_transform(df_cluster)

    # Determinar o n√∫mero √≥timo de clusters
    st.subheader("M√©todo Elbow para Determinar o N√∫mero de Clusters")
    st.write(
        """ O Elbow, tamb√©m chamado de m√©todo do cotovelo,  √© amplamente utilizado para determinar o n√∫mero ideal de clusters (ùëò) em algoritmos de clusteriza√ß√£o como o K-Means. Ele ajuda a encontrar o equil√≠brio entre a simplicidade do modelo e a capacidade de representar os dados.
    """
    )
    inertia = []
    for k in range(1, 11):
        kmeans = KMeans(n_clusters=k, random_state=0, n_init=10)
        kmeans.fit(df_cluster_scaled)
        inertia.append(kmeans.inertia_)

    # Exibir gr√°fico Elbow
    fig, ax = plt.subplots(figsize=(8, 5))
    ax.plot(range(1, 11), inertia, marker="o")
    ax.set_title("M√©todo Elbow para Definir k √ìtimo")
    ax.set_xlabel("N√∫mero de Clusters (k)")
    ax.set_ylabel("In√©rcia")
    st.pyplot(fig)

    # Sele√ß√£o de k √≥timo e aplica√ß√£o do KMeans
    optimal_k = st.sidebar.slider(
        "N√∫mero de Clusters (k)", min_value=2, max_value=10, value=3
    )
    kmeans = KMeans(n_clusters=optimal_k, random_state=0, n_init=10)
    df_cluster["Cluster"] = kmeans.fit_predict(df_cluster_scaled)

    # Resumo dos clusters
    st.subheader("Resumo dos Clusters")
    cluster_summary = df_cluster.groupby("Cluster").agg(["mean", "count"])
    st.dataframe(cluster_summary)

    # Visualiza√ß√£o dos clusters (2D - usando Study_Hours e Grades)
    st.subheader("Visualiza√ß√£o dos Clusters")
    st.write(
        """
    Este gr√°fico apresenta a distribui√ß√£o dos estudantes em diferentes clusters, com base em suas horas de estudo e notas. 
    Os centr√≥ides (em vermelho) representam o ponto m√©dio de cada cluster, indicando as caracter√≠sticas m√©dias dos estudantes em cada grupo.
    """
    )
    fig, ax = plt.subplots(figsize=(8, 6))
    scatter = ax.scatter(
        df_cluster["Study_Hours"],
        df_cluster["Grades"],
        c=df_cluster["Cluster"],
        cmap="viridis",
        alpha=0.7,
    )
    ax.scatter(
        kmeans.cluster_centers_[:, cluster_features.index("Study_Hours")]
        * (df_cluster["Study_Hours"].max() - df_cluster["Study_Hours"].min())
        + df_cluster["Study_Hours"].min(),
        kmeans.cluster_centers_[:, cluster_features.index("Grades")]
        * (df_cluster["Grades"].max() - df_cluster["Grades"].min())
        + df_cluster["Grades"].min(),
        s=300,
        c="red",
        label="Centroids",
    )
    ax.set_xlabel("Horas de Estudo")
    ax.set_ylabel("Notas")
    ax.set_title("Clusteriza√ß√£o de Estudantes com Base em Horas de Estudo e Notas")
    ax.legend()
    st.pyplot(fig)

    # Exibi√ß√£o dos estudantes do cluster escolhido
    st.subheader("Estudantes nos Clusters")
    selected_cluster = st.sidebar.selectbox(
        "Selecione o Cluster para Visualizar:", sorted(df_cluster["Cluster"].unique())
    )
    st.dataframe(df_unistudents.loc[df_cluster["Cluster"] == selected_cluster])

except FileNotFoundError:
    st.error(
        "Arquivo './data/unistudents.csv' n√£o encontrado. Certifique-se de que o caminho est√° correto."
    )
except ValueError as e:
    st.error(f"Erro ao processar os dados: {e}")

# An√°lise do cluster com maior desempenho e menor esfor√ßo
st.subheader("Identifica√ß√£o do Cluster com Maiores Notas e Menores Horas de Estudo")
cluster_means = df_cluster.groupby("Cluster")[["Study_Hours", "Grades"]].mean()

# Ordenar os clusters: maiores notas e menores horas
sorted_clusters = cluster_means.sort_values(
    by=["Grades", "Study_Hours"], ascending=[False, True]
)

# Identificar o cluster de maior desempenho e menor esfor√ßo
best_cluster = sorted_clusters.index[0]

# Exibir o resumo desse cluster
st.write(f"### Cluster {best_cluster} - Maiores Notas com Menores Horas de Estudo")
st.write("M√©dias desse cluster:")
st.dataframe(sorted_clusters.loc[best_cluster].to_frame().T)

# Exibir a amostra de estudantes pertencentes ao cluster escolhido
st.subheader("Amostra dos Estudantes no Cluster de Alto Desempenho")
best_cluster_students = df_cluster[df_cluster["Cluster"] == best_cluster]
st.dataframe(best_cluster_students.head())

# An√°lises adicionais baseadas em outros fatores
st.subheader("Fatores Adicionais que Influenciam o Desempenho")
st.write(
    """
    Aqui est√£o os fatores adicionais, como motiva√ß√£o, n√≠veis de estresse e qualidade do ambiente escolar,
    que podem ser analisados para entender melhor as caracter√≠sticas dos estudantes de cada cluster.
"""
)
additional_factors = ["Motivation", "Stress_Levels", "School_Environment"]
for factor in additional_factors:
    st.write(f"Distribui√ß√£o de {factor} por Cluster")
    fig, ax = plt.subplots(figsize=(8, 5))
    for cluster in sorted(df_cluster["Cluster"].unique()):
        sns.kdeplot(
            df_unistudents.loc[df_cluster["Cluster"] == cluster, factor],
            ax=ax,
            label=f"Cluster {cluster}",
        )
    ax.set_title(f"Distribui√ß√£o de {factor} por Cluster")
    ax.set_xlabel(factor)
    ax.set_ylabel("Densidade")
    ax.legend()
    st.pyplot(fig)
